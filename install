#!/usr/bin/env python3
import logging
from pathlib import Path
import shutil

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BASE_PATH = Path(__file__).parent
HOME = Path.home()

DEPRECATED_PATHS = [
    HOME / ".gitconfig.d",
]


def create_link(src: Path, dest: Path):
    # If the destination is already a link, remove it so we can point to the
    # most updated source file.
    if dest.is_symlink():
        dest.unlink()

    dest.symlink_to(src)
    logger.info("Created link %s pointing to %s", dest, src)


def customize_zsh():
    create_link(BASE_PATH / "zsh" / ".zshrc", HOME / ".zshrc")

    zsh_custom = HOME / ".oh-my-zsh" / "custom"
    if not zsh_custom.exists():
        logger.info("The path %s does not exist. Skipping ZSH customizations.")
        return

    logger.info("Installing ZSH customizations to %s", zsh_custom)
    customizations = BASE_PATH / "zsh" / "customizations"
    for customization in customizations.glob("*.zsh"):
        target_path = zsh_custom / customization.name
        create_link(customization, target_path)


def main():
    logger.info("Starting dotfiles install.")
    logger.info("Base path: %s", BASE_PATH)

    logger.info("Cleaning up deprecated paths...")
    for path in DEPRECATED_PATHS:
        if path.exists():
            if path.is_dir():
                shutil.rmtree(path)
            else:
                path.rm
            logger.info("Removed deprecated path %s", path)
    logger.info("Cleanup finished")

    customize_zsh()

    create_link(BASE_PATH / "bash" / ".bashrc", HOME / ".bashrc")
    create_link(BASE_PATH / "git" / ".gitconfig", HOME / ".gitconfig")
    create_link(BASE_PATH / "vim" / ".vimrc", HOME / ".vimrc")



if __name__ == "__main__":
    main()
